const{createServer}=require("http");function checkMethod(a){if(!["GET","POST","PUT","DELETE","PATCH"].includes(a))throw new Error("invalid method")}function checkPath(a){if("string"==typeof a){if(!a.startsWith("/"))throw new Error("path must start with /");return}if(a instanceof RegExp){if(!a.source.startsWith("^\\/")||!a.source.endsWith("$"))throw new Error("path must start with ^/ and ends with $");return}throw new Error("path must be string or RegExp")}class RegexRouter{constructor(){this.routes=new Map,this.middlewares=[],this.notFoundHandler=(a,b)=>{b.statusCode=404,b.end(JSON.stringify({error:"Not found"}))},this.internalErrorHandler=(a,b)=>{b.statusCode=500,b.end(JSON.stringify({error:"Internal server error"}))}}use(a){this.middlewares.push(a),this.notFoundHandler=a(this.notFoundHandler),this.internalErrorHandler=a(this.internalErrorHandler)}register(a,b,c,...d){return checkMethod(a),checkPath(b),c=d.reduce((a,b)=>b(a),c),c=this.middlewares.reduce((a,b)=>b(a),c),this.routes.has(a)?void this.routes.get(a).set(b,c):void this.routes.set(a,new Map([[b,c]]))}handle(a,b){if(!this.routes.has(a.method))return void this.notFoundHandler(a,b);const c=[...this.routes.get(a.method).entries()].find(([b,c])=>"string"==typeof b?b===a.url:b.test(a.url));if("undefined"==typeof c)return void this.notFoundHandler(a,b);const[d,e]=c;try{d instanceof RegExp&&(a.matches=d.exec(a.url).groups),e(a,b)}catch(c){this.internalErrorHandler(a,b)}}}const cors=a=>(b,c)=>{const d=b.headers.origin;if(!d)return void a(b,c);const f={"access-control-allow-origin":"*"};if("OPTIONS"!==b.method){Object.entries(f).forEach(([a,b])=>c.setHeader(a,b));try{return void a(b,c)}catch(a){throw a.headers={...a.headers,...f},a}}b.headers["access-control-request-method"]&&(Object.entries({...f,"access-control-allow-methods":"GET, POST, PUT, DELETE, PATCH"}).forEach(([a,b])=>c.setHeader(a,b)),b.headers["access-control-request-headers"]&&c.setHeader("access-control-allow-headers",b.headers["access-control-request-headers"]),c.statusCode=204,c.end())},slow=a=>(b,c)=>{setTimeout(()=>{a(b,c)},5e3)},log=a=>(b,c)=>{console.info(`incoming request: ${b.method} ${b.url}`),a(b,c)},json=a=>(b,c)=>{const d=[];b.on("data",a=>{d.push(a)}),b.on("end",()=>{try{b.body=JSON.parse(Buffer.concat(d).toString())}catch(a){return c.statusCode=400,void c.end(JSON.stringify({error:"invalid json"}))}console.info(b.body),a(b,c)})},router=new RegexRouter;router.use(log),router.use(cors),router.use(slow),router.register("GET","/api/health",(a,b)=>{b.setHeader("Content-Type","application/json"),b.end(JSON.stringify({status:"ok"}))});{let a=1,b=1;let c=[...JSON.parse(JSON.stringify([]))];c.reverse(),router.register("GET","/api/posts",(a,b)=>{b.setHeader("Content-Type","application/json"),b.end(JSON.stringify(c))}),router.register("POST","/api/posts",(b,d)=>{const e=b.body;0===e.id?(e.id=a++,e.likes=0,e.comments=[],c=[e,...c]):c=c.map(a=>a.id===e.id?{...a,author:e.author,text:e.text}:a),d.setHeader("Content-Type","application/json"),d.end(JSON.stringify(e))},json),router.register("DELETE",/^\/api\/posts\/(?<id>\d+)$/,(a,b)=>{const d=+a.matches.id;return Number.isNaN(d)?(b.statusCode=400,void b.send(JSON.stringify({error:"bad id"}))):void(c=c.filter(a=>a.id!==d),b.statusCode=204,b.end())}),router.register("POST",/^\/api\/posts\/(?<id>\d+)\/likes$/,(a,b)=>{const d=+a.matches.id;return Number.isNaN(d)?(b.statusCode=400,void b.send(JSON.stringify({error:"bad id"}))):void(c=c.map(a=>a.id===d?{...a,likes:a.likes+1}:a),b.statusCode=204,b.end())}),router.register("DELETE",/^\/api\/posts\/(?<id>\d+)\/likes$/,(a,b)=>{const d=+a.matches.id;return Number.isNaN(d)?(b.statusCode=400,void b.send(JSON.stringify({error:"bad id"}))):void(c=c.map(a=>a.id===d?{...a,likes:a.likes+1}:a),b.statusCode=204,b.end())}),router.register("POST",/^\/api\/posts\/(?<id>\d+)\/comments$/,(a,d)=>{const e=+a.matches.id;if(Number.isNaN(e))return d.statusCode=400,void d.send(JSON.stringify({error:"bad id"}));const f=a.body;f.id=b++,c=c.map(a=>a.id===e?{...a,comments:[...a.comments,f]}:a),d.setHeader("Content-Type","application/json"),d.end(JSON.stringify(f))},json)}const server=createServer((a,b)=>router.handle(a,b));server.listen(9999,()=>{console.info("server started at http://localhost:9999")});