const{createServer:createServer}=require("http");function checkMethod(e){if(!["GET","POST","PUT","DELETE","PATCH"].includes(e))throw new Error("invalid method")}function checkPath(e){if("string"!=typeof e){if(!(e instanceof RegExp))throw new Error("path must be string or RegExp");if(!e.source.startsWith("^\\/")||!e.source.endsWith("$"))throw new Error("path must start with ^/ and ends with $")}else if(!e.startsWith("/"))throw new Error("path must start with /")}class RegexRouter{constructor(){this.routes=new Map,this.middlewares=[],this.notFoundHandler=((e,t)=>{t.statusCode=404,t.end(JSON.stringify({error:"Not found"}))}),this.internalErrorHandler=((e,t)=>{t.statusCode=500,t.end(JSON.stringify({error:"Internal server error"}))})}use(e){this.middlewares.push(e),this.notFoundHandler=e(this.notFoundHandler),this.internalErrorHandler=e(this.internalErrorHandler)}register(e,t,r,...s){checkMethod(e),checkPath(t),r=s.reduce((e,t)=>t(e),r),r=this.middlewares.reduce((e,t)=>t(e),r),this.routes.has(e)?this.routes.get(e).set(t,r):this.routes.set(e,new Map([[t,r]]))}handle(e,t){if(!this.routes.has(e.method))return void this.notFoundHandler(e,t);const r=[...this.routes.get(e.method).entries()].find(([t,r])=>"string"==typeof t?t===e.url:t.test(e.url));if(void 0===r)return void this.notFoundHandler(e,t);const[s,o]=r;try{s instanceof RegExp&&(e.matches=s.exec(e.url).groups),o(e,t)}catch(r){console.log(r),this.internalErrorHandler(e,t)}}}const cors=e=>(t,r)=>{if(!t.headers.origin)return void e(t,r);const s={"access-control-allow-origin":"*"};if("OPTIONS"!==t.method){Object.entries(s).forEach(([e,t])=>r.setHeader(e,t));try{return void e(t,r)}catch(e){throw e.headers={...e.headers,...s},e}}t.headers["access-control-request-method"]&&(Object.entries({...s,"access-control-allow-methods":"GET, POST, PUT, DELETE, PATCH"}).forEach(([e,t])=>r.setHeader(e,t)),t.headers["access-control-request-headers"]&&r.setHeader("access-control-allow-headers",t.headers["access-control-request-headers"]),r.statusCode=204,r.end())},slow=e=>(t,r)=>{setTimeout(()=>{e(t,r)},5e3)},log=e=>(t,r)=>{console.info(`incoming request: ${t.method} ${t.url}`),e(t,r)},json=e=>(t,r)=>{const s=[];t.on("data",e=>{s.push(e)}),t.on("end",()=>{try{t.body=JSON.parse(Buffer.concat(s).toString())}catch(e){return r.statusCode=400,void r.end(JSON.stringify({error:"invalid json"}))}console.info(t.body),e(t,r)})},router=new RegexRouter;router.use(log),router.use(cors),router.use(slow),router.register("GET","/api/health",(e,t)=>{t.setHeader("Content-Type","application/json"),t.end(JSON.stringify({status:"ok"}))});{let e=1,t=1;const r=[{id:e++,author:{avatar:"https://lms.openjs.io/logo_js.svg",name:"OpenJS"},content:"Some stuff",photo:{url:"wow",alt:"wow"},hit:!1,likes:0,likedByMe:!1,hidden:!1,tags:["funny"],created:Date.now()}];let s=[...JSON.parse(JSON.stringify(r))];s.reverse(),router.register("GET","/api/posts",(e,t)=>{t.setHeader("Content-Type","application/json"),t.end(JSON.stringify(s))}),router.register("GET",/^\/api\/posts\/(?<id>\d+)$/,(e,t)=>{const r=Number(e.matches.id);if(Number.isNaN(r))return t.statusCode=400,void t.end(JSON.stringify({error:"bad id"}));const o=s.find(e=>e.id===r);if(void 0===o)return t.statusCode=404,void t.end(JSON.stringify({error:"not found"}));t.end(JSON.stringify(o))}),router.register("POST","/api/posts",(t,r)=>{const o=t.body;0===o.id?(o.id=e++,o.likes=0,o.comments=[],s=[o,...s]):s=s.map(e=>e.id!==o.id?e:{...e,author:o.author,text:o.text}),r.setHeader("Content-Type","application/json"),r.end(JSON.stringify(o))},json),router.register("DELETE",/^\/api\/posts\/(?<id>\d+)$/,(e,t)=>{const r=Number(e.matches.id);if(Number.isNaN(r))return t.statusCode=400,void t.end(JSON.stringify({error:"bad id"}));s=s.filter(e=>e.id!==r),t.statusCode=204,t.end()}),router.register("POST",/^\/api\/posts\/(?<id>\d+)\/likes$/,(e,t)=>{const r=Number(e.matches.id);if(Number.isNaN(r))return t.statusCode=400,void t.end(JSON.stringify({error:"bad id"}));s=s.map(e=>e.id!==r?e:{...e,likes:e.likes+1}),t.statusCode=204,t.end()}),router.register("DELETE",/^\/api\/posts\/(?<id>\d+)\/likes$/,(e,t)=>{const r=Number(e.matches.id);if(Number.isNaN(r))return t.statusCode=400,void t.end(JSON.stringify({error:"bad id"}));s=s.map(e=>e.id!==r?e:{...e,likes:e.likes+1}),t.statusCode=204,t.end()}),router.register("POST",/^\/api\/posts\/(?<id>\d+)\/comments$/,(e,r)=>{const o=Number(e.matches.id);if(Number.isNaN(o))return r.statusCode=400,void r.end(JSON.stringify({error:"bad id"}));const i=e.body;i.id=t++,s=s.map(e=>e.id!==o?e:{...e,comments:[...e.comments,i]}),r.setHeader("Content-Type","application/json"),r.end(JSON.stringify(i))},json)}const server=createServer((e,t)=>router.handle(e,t));server.listen(9999,()=>{console.info("server started at http://localhost:9999")});